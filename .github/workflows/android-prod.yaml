name: Flutter - Android Build Production

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

permissions:
  contents: write  # Needed to push commits and tags
  packages: write

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup JDK
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Setup BASE URL File
        run: echo "${{ secrets.BASE_URL_FILE }}" | base64 --decode > lib/core/api/api.dart
      
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'
          flutter-version: 3.29.1
      
      - name: Install dependencies
        run: flutter pub get

      - name: Auto format the dart code
        run: dart format .

      - name: Verify the dart code is formatted
        run: dart format --output=none --set-exit-if-changed .

      - name: Run test
        run: flutter test

      - name: Analyze the dart code
        run: flutter analyze --fatal-warnings

      - name: Decode and save keystore file
        run: |
          echo "${{ secrets.KEYSTORE_BASE64 }}" | base64 --decode > android/app/upload-keystore.jks

      - name: Configure keystore properties
        run: |
          echo "storePassword=${{ secrets.KEYSTORE_PASSWORD }}" > android/key.properties
          echo "keyPassword=${{ secrets.KEY_PASSWORD }}" >> android/key.properties
          echo "keyAlias=${{ secrets.KEY_ALIAS }}" >> android/key.properties
          echo "storeFile=upload-keystore.jks" >> android/key.properties

      - name: Build signed APK
        run: flutter build apk --release

      - name: Upload APK
        uses: actions/upload-artifact@v4
        with:
          name: android-release-apk
          path: build/app/outputs/flutter-apk/app-release.apk

      - name: Extract version from pubspec.yaml
        id: get_version
        run: |
          VERSION=$(grep "^version:" pubspec.yaml | awk '{print $2}' | cut -d+ -f1)
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "Tagging version v$VERSION"

      - name: Create Git tag
        run: |
          git config user.name "NyeinChanAung203"
          git config user.email "nca05531@gmail.com"
          git tag "v$VERSION"
          git push origin "v$VERSION"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

